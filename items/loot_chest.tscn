[gd_scene load_steps=20 format=3 uid="uid://bdtx1ty1p5o4x"]

[ext_resource type="Script" uid="uid://fsk06xq5f563" path="res://items/loot_chest.gd" id="1_x8pkq"]
[ext_resource type="PackedScene" uid="uid://clxlxqn7b6tph" path="res://effects/shadow.tscn" id="2_5b0rr"]
[ext_resource type="Texture2D" uid="uid://5id1khmlrkd" path="res://assets/sprites/items/chest.png" id="2_opnel"]

[sub_resource type="CircleShape2D" id="CircleShape2D_opnel"]
radius = 18.0278

[sub_resource type="AtlasTexture" id="AtlasTexture_5b0rr"]
atlas = ExtResource("2_opnel")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_3nwmh"]
atlas = ExtResource("2_opnel")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_w0n2s"]
atlas = ExtResource("2_opnel")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_gx8yf"]
atlas = ExtResource("2_opnel")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_6v2hj"]
atlas = ExtResource("2_opnel")
region = Rect2(0, 32, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_bdmrk"]
atlas = ExtResource("2_opnel")
region = Rect2(32, 32, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_id7cw"]
atlas = ExtResource("2_opnel")
region = Rect2(64, 32, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_sedei"]
atlas = ExtResource("2_opnel")
region = Rect2(0, 64, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_fm37y"]
atlas = ExtResource("2_opnel")
region = Rect2(32, 64, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_dv2w4"]
atlas = ExtResource("2_opnel")
region = Rect2(64, 64, 32, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_obndx"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5b0rr")
}],
"loop": false,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_3nwmh")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_w0n2s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gx8yf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6v2hj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_bdmrk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_id7cw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_sedei")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fm37y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dv2w4")
}],
"loop": false,
"name": &"open",
"speed": 8.0
}]

[sub_resource type="Shader" id="Shader_opnel"]
resource_local_to_scene = true
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

uniform vec4 color : source_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
    return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{

    // Rotate, skew and move the UVs
    vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );

    // Animate the ray according the the new transformed UVs
    vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
    vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);

    // Cut off the ray's edges
    float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
    ray1 *= cut;
    ray2 *= cut;

    // Apply the noise pattern (i.e. create the rays)
    float rays;

    if (hdr){
        // This is not really HDR, but check this to not clamp the two merged rays making
        // their values go over 1.0. Can make for some nice effect
        rays = noise(ray1) + (noise(ray2) * ray2_intensity);
    }
    else{
         rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
    }

    // Fade out edges
    rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
    rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
    rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right

    // Color to the rays
    vec3 shine = vec3(rays) * color.rgb;

    // Try different blending modes for a nicer effect. \"Screen\" is included in the code,
    // but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
    // With \"Screen\" blend mode:
    shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;

    COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5b0rr"]
resource_local_to_scene = true
shader = SubResource("Shader_opnel")
shader_parameter/angle = 0.135
shader_parameter/position = 0.125
shader_parameter/spread = 0.707
shader_parameter/cutoff = 0.179
shader_parameter/falloff = 1.0
shader_parameter/edge_fade = 0.15
shader_parameter/speed = 1.0
shader_parameter/ray1_density = 8.0
shader_parameter/ray2_density = 30.0
shader_parameter/ray2_intensity = 0.7
shader_parameter/color = Color(0.788541, 0.617527, 1.92523e-06, 0.8)
shader_parameter/hdr = false
shader_parameter/seed = 31.305

[sub_resource type="CircleShape2D" id="CircleShape2D_4qplx"]
radius = 78.0577

[sub_resource type="CircleShape2D" id="CircleShape2D_5b0rr"]
radius = 157.003

[node name="LootChest" type="StaticBody2D"]
collision_mask = 3
script = ExtResource("1_x8pkq")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2(0, 2)
shape = SubResource("CircleShape2D_opnel")

[node name="Shadow" parent="." instance=ExtResource("2_5b0rr")]
position = Vector2(0, -1)
scale = Vector2(4, 4)

[node name="Sprite" type="AnimatedSprite2D" parent="."]
unique_name_in_owner = true
scale = Vector2(2, 2)
sprite_frames = SubResource("SpriteFrames_obndx")
animation = &"open"
autoplay = "idle"
frame = 8
frame_progress = 1.0

[node name="Rays" type="Panel" parent="."]
unique_name_in_owner = true
z_as_relative = false
material = SubResource("ShaderMaterial_5b0rr")
custom_minimum_size = Vector2(100, 300)
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -50.0
offset_top = -600.0
offset_right = 50.0
offset_bottom = -300.0
grow_horizontal = 2
grow_vertical = 0
rotation = 3.14159
pivot_offset = Vector2(50, 300)

[node name="TriggerRadius" type="Area2D" parent="."]
collision_layer = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="TriggerRadius"]
shape = SubResource("CircleShape2D_4qplx")

[node name="SafeArea" type="Area2D" parent="."]
unique_name_in_owner = true
collision_layer = 0
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="SafeArea"]
shape = SubResource("CircleShape2D_5b0rr")
debug_color = Color(0.890196, 0.317647, 0.184314, 0.203922)

[connection signal="body_entered" from="TriggerRadius" to="." method="_on_trigger_radius_body_entered"]
